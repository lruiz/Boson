options {
    LOOKAHEAD = 1;
    STATIC = false;
    UNICODE_INPUT = true;
    MULTI = true;
    BUILD_NODE_FILES = true;
    NODE_PREFIX = "";
    NODE_DEFAULT_VOID = true;
    NODE_USES_PARSER = false;
    NODE_PACKAGE = "org.tautua.boson.json.ast";
    DEBUG_PARSER = false;
    DEBUG_TOKEN_MANAGER = false;
    DEBUG_LOOKAHEAD = false;
}

PARSER_BEGIN(Parser)
package org.tautua.boson.json.parser;

import org.tautua.boson.json.ast.*;

public class Parser {

    public Node parse() throws ParseException {
        Value();
        return jjtree.rootNode();
    }

}

PARSER_END(Parser)


/* WHITESPACE */
SKIP : {
    " "
    | "\t"
    | "\r"
    | "\n"
}

/* KEYWORDS */
TOKEN : {
    < TRUE : "true" >
    | < FALSE : "false" >
    | < NULL : "null" >
}

/* PUNCTUATION */
TOKEN : {
    < COLON : ":" >
    | < COMMA : "," >
    | < DOUBLE_QUOTE : "\"" >
    | < LBRACKET : "[" >
    | < LBRACE : "{" >
    | < RBRACKET : "]" >
    | < RBRACE : "}" >
    | < SINGLE_QUOTE : "'" >
}

/* LITERALS */
TOKEN : {
  < STRING_LITERAL:
      "\""
      (
        (~["\"","\\","\n","\r"])
        | <ESCAPED_CHAR>
        | <UNICODE_CHAR>
      )*
      "\""
  >
  | < INTEGER_NUMBER : ( <DIGIT> )+ ( <EXPONENT> )? >
  | < FLOATING_NUMBER : ( <DIGIT> )+ "." ( <DIGIT> )* ( <EXPONENT> )?
        | "."  ( <DIGIT> )+ ( <EXPONENT> )? >
  | < #UNICODE_CHAR : "\\" "u" <HEXADECIMAL> <HEXADECIMAL> <HEXADECIMAL> <HEXADECIMAL> >
  | < #ESCAPED_CHAR : "\\" ["\\", "/", "b", "f", "n", "r", "t"] >
  | < #DIGIT : ["0"-"9"] >
  | < #SIGN : ["-", "+"] >
  | < #HEXADECIMAL : ["a"-"f", "A"-"F", "0"-"9"] >
  | < #EXPONENT : ("e" | "E") ( <SIGN> )? ( <DIGIT> )+ >
}


void Object() #Instance : {} {
    "{" ( members() )? "}"
}

void members() : {} {
    Pair() ( "," Pair() )*
}

void Pair() #Member : {
    Token t;
} {
    t = <STRING_LITERAL> { jjtThis.setName(t.image.substring(1, t.image.length()-1));} ":" Value()
}

void Array() #Array : {} {
    "[" ( elements() )? "]"
}

void elements() : {} {
    Value() ( "," Value() )*
}

void Value() : {} {
    Literal() | Object() | Array()
}

void Literal() #Literal : {
    Token t;
} {
    (
      t = <STRING_LITERAL> { jjtThis.setValue(t.image.substring(1, t.image.length()-1)); }
    | t = <INTEGER_NUMBER> { jjtThis.setValue(new Long(t.image)); }
    | t = <FLOATING_NUMBER> { jjtThis.setValue(new Double(t.image)); }
    | <TRUE> { jjtThis.setValue(true); }
    | <FALSE> { jjtThis.setValue(false); }
    | <NULL>
    )
}
